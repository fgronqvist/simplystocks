/*
 */
package simplystocks.gui;

import java.math.BigDecimal;
import java.math.RoundingMode;
import java.sql.SQLException;
import java.util.ArrayList;
import java.util.Arrays;
import javax.swing.JOptionPane;
import simplystocks.helpers.ErrorHandler;
import simplystocks.helpers.GenericErrorHandler;
import simplystocks.helpers.StockHandler;
import simplystocks.logic.Portfolio;
import simplystocks.logic.Stock;
import simplystocks.logic.Transaction;
import simplystocks.logic.TransactionBuy;
import simplystocks.logic.TransactionSell;

/**
 *
 * @author Fredrik Gr√∂nqvist <fredrik.groqvist+nb@gmail.com>
 */
public class TransactionForm extends javax.swing.JFrame {

    MainForm mainForm = null;
    
    /**
     * Creates new form TransactionForm
     */
    public TransactionForm() {
        initComponents();
        setPickerData();
        setStockTickers();
    }
    
    /**
     * Set the MainForm so we can interact with it from this form.
     * @param form 
     */
    public void setMainForm(MainForm form){
        mainForm = form;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnGrpTransactionType = new javax.swing.ButtonGroup();
        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        txtTicker = new javax.swing.JComboBox();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtStockAmount = new javax.swing.JTextField();
        txtCurrencyAmount = new javax.swing.JTextField();
        btnSave = new javax.swing.JButton();
        btnCancel = new javax.swing.JButton();
        rdoBuy = new javax.swing.JRadioButton();
        rdoSell = new javax.swing.JRadioButton();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        dateTransactionDate = new com.toedter.calendar.JDateChooser();
        txtCurrency = new javax.swing.JComboBox();
        txtExchange = new javax.swing.JTextField();
        txtName = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setTitle("Transaction details");
        setAlwaysOnTop(true);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Transaction"));

        jLabel1.setText("Ticker");

        txtTicker.setEditable(true);
        txtTicker.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTickerActionPerformed(evt);
            }
        });

        jLabel2.setText("Exchange");

        jLabel3.setText("Name");

        jLabel4.setText("Stock amount");

        jLabel5.setText("Currency amount");

        jLabel6.setText("Currency");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnCancel.setText("Cancel");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        btnGrpTransactionType.add(rdoBuy);
        rdoBuy.setText("Buy");

        btnGrpTransactionType.add(rdoSell);
        rdoSell.setText("Sell");

        jLabel7.setText("Type");

        jLabel8.setText("Date");

        txtCurrency.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "EUR" }));
        txtCurrency.setMinimumSize(new java.awt.Dimension(134, 25));

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel6)
                        .addGap(75, 75, 75)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(btnSave)
                                .addGap(38, 38, 38)
                                .addComponent(btnCancel))
                            .addComponent(txtCurrency, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel1)
                            .addComponent(jLabel2)
                            .addComponent(jLabel3)
                            .addComponent(jLabel4)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8))
                        .addGap(23, 23, 23)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(rdoBuy)
                                .addGap(18, 18, 18)
                                .addComponent(rdoSell))
                            .addComponent(txtTicker, javax.swing.GroupLayout.Alignment.TRAILING, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtStockAmount, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtCurrencyAmount, javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(dateTransactionDate, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(txtExchange)
                            .addComponent(txtName))))
                .addContainerGap(90, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(11, 11, 11)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdoBuy)
                    .addComponent(rdoSell)
                    .addComponent(jLabel7))
                .addGap(12, 12, 12)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jLabel8)
                    .addComponent(dateTransactionDate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtTicker, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(txtExchange, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(txtStockAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(txtCurrencyAmount, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(txtCurrency, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnSave)
                    .addComponent(btnCancel))
                .addContainerGap(31, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        setSize(new java.awt.Dimension(410, 430));
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void txtTickerActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTickerActionPerformed
        if (txtTicker.getSelectedIndex() > 0) {
            try {
                Stock stock = StockHandler.getInstance().getStockByTicker(
                        txtTicker.getSelectedItem().toString());
                txtExchange.setEnabled(false);
                txtExchange.setText(stock.getExchange());
                txtName.setEnabled(false);
                txtName.setText(stock.getName());
            }
            catch (SQLException ex) {
                String msg = "A database error occured! \n";
                msg += ex.getMessage();
                showErrorDialog(msg);
            }
            catch (Exception ex) {
                String msg = "An unexpected erro occured!\n";
                msg += ex.getMessage();
                showErrorDialog(msg);
            }
        } else {
            txtExchange.setEnabled(true);
            txtExchange.setText("");
            txtName.setEnabled(true);
            txtName.setText("");
        }

    }//GEN-LAST:event_txtTickerActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        dispose();
    }//GEN-LAST:event_btnCancelActionPerformed

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        try {
            Portfolio portfolio = new Portfolio(new GenericErrorHandler());
            Transaction transaction;

            if (this.rdoBuy.isSelected()) {
                transaction = new TransactionBuy();
            } else if (this.rdoSell.isSelected()) {
                transaction = new TransactionSell();
            } else {
                throw new Exception("No transaction type selected");
            }

            if (dateTransactionDate.getDate() == null) {
                throw new Exception("No date provided");
            }

            Stock stock;
            try {
                stock = this.getStock();
            }
            catch (Exception e) {
                throw new Exception("Stock ticker, exchange and name must be set.");
            }

            transaction = this.setTransactionData(transaction);
            transaction.setStock(stock);

            ErrorHandler errHandler = portfolio.addTransaction(transaction);
            if(errHandler.hasErrors()){
                String msg = "Transaction failed!\n"
                        + errHandler.getErrorMessage();
                showErrorDialog(msg);
            } else {
                JOptionPane.showMessageDialog(rootPane, "Transaction saved successfully.");
                mainForm.loadSumData();
                mainForm.loadTableData();
                dispose();                
            }
        }
        catch (Exception ex) {
            System.out.println(Arrays.toString(ex.getStackTrace()));
            System.out.println(ex.toString());
            this.showErrorDialog(ex.getMessage());
        }
    }//GEN-LAST:event_btnSaveActionPerformed

    public void showErrorDialog(String message) {
        if (message.isEmpty()) {
            message = "An undefined error occured.";
        }
        JOptionPane.showMessageDialog(rootPane, message, "Error",
                JOptionPane.ERROR_MESSAGE);
    }

    /**
     *
     * @return Stock with the entered values
     * @throws Exception
     */
    public Stock getStock() throws Exception {
        Stock stock = new Stock();
        stock.setTicker(this.txtTicker.getSelectedItem().toString());
        stock.setName(this.txtName.getText());
        stock.setExchange(this.txtExchange.getText());
        return stock;
    }

    /**
     * BROKEN for the moment.
     * 
     * Formats the calendar date to "dd.MM.YYYY".
     */
    private void setPickerData() {
        // The date does not work for the moment.
        //dateTransactionDate.setDateFormatString("dd.MM.YYYY");
    }

    /**
     * Sets the tickers to the combobox.
     */
    private void setStockTickers() {      
        try {
            ArrayList<String> list = StockHandler.getInstance().getStockTickers();
            txtTicker.addItem(new String());
            for (String ticker : list) {
                txtTicker.addItem(ticker);
            }
        }
        catch (SQLException ex) {
            String msg = "A database error occured!\n";
            msg += ex.getMessage();
            showErrorDialog(msg);
        }
        catch (Exception ex) {
            String msg = "An unexpected error occured!\n";
            msg += ex.getMessage();
            showErrorDialog(msg);
        }
    }

    /**
     *
     * @param transaction
     * @return
     * @throws java.lang.Exception
     */
    public Transaction setTransactionData(Transaction transaction) throws Exception {
        transaction.setDate(dateTransactionDate.getDate());
        transaction.setStockAmount(
                Integer.parseInt(this.txtStockAmount.getText()));
        double curAmount = Double.parseDouble(this.txtCurrencyAmount.getText());
        transaction.setCurrencyAmount(
                BigDecimal.valueOf(curAmount).setScale(2, RoundingMode.HALF_UP)
        );
        transaction.setCurrency(this.txtCurrency.getSelectedItem().toString());
        return transaction;
    }

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        }
        catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(TransactionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(TransactionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(TransactionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(TransactionForm.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new TransactionForm().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.ButtonGroup btnGrpTransactionType;
    private javax.swing.JButton btnSave;
    private com.toedter.calendar.JDateChooser dateTransactionDate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JRadioButton rdoBuy;
    private javax.swing.JRadioButton rdoSell;
    private javax.swing.JComboBox txtCurrency;
    private javax.swing.JTextField txtCurrencyAmount;
    private javax.swing.JTextField txtExchange;
    private javax.swing.JTextField txtName;
    private javax.swing.JTextField txtStockAmount;
    private javax.swing.JComboBox txtTicker;
    // End of variables declaration//GEN-END:variables
}
